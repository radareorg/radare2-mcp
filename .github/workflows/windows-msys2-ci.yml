name: windows-msys2-ci

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  R2_REPO: https://github.com/radareorg/radare2
  R2_TAG: ''
  R2V: 6.0.2

jobs:
  build-msys2:
    name: Build (MSYS2 / MINGW64)
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up MSYS2 (MINGW64)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-cmake

      - name: Install Python/Meson/Ninja
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install meson ninja

      - name: Download radare2 release (zip)
        shell: bash
        run: |
          R2V=${{ env.R2V }}
          TMPZIP=/tmp/radare2.zip
          candidates=(
            "radare2-${R2V}-windows-x64.zip"
            "radare2-${R2V}-windows.zip"
            "radare2-${R2V}-msys2.zip"
            "radare2-${R2V}-mingw64.zip"
          )
          found=""
          for n in "${candidates[@]}"; do
            url="https://github.com/radareorg/radare2/releases/download/${R2V}/${n}"
            echo "Trying $url"
            if curl -fsSL "$url" -o "$TMPZIP"; then
              echo "Downloaded $n"
              found=1
              break
            else
              echo "Not found: $n"
            fi
          done
          if [ -z "$found" ]; then
            echo "No radare2 release zip found for $R2V; continuing without it."
            exit 0
          fi
          # Extract into /mingw64 if available
          prefix=/mingw64
          if [ ! -d "$prefix" ]; then prefix=/usr; fi
          mkdir -p "$prefix"
          unzip -o "$TMPZIP" -d "$prefix"
          echo "Extracted radare2 to $prefix"

      - name: Optionally build radare2 from source
        if: env.R2_TAG != ''
        shell: bash
        run: |
          git clone --depth=1 --branch "${R2_TAG}" "${R2_REPO}" radare2
          cd radare2
          sys/install.sh /mingw64 || true

      - name: Meson configure
        shell: bash
        run: |
          meson setup --reconfigure builddir --prefix= --buildtype=release -Dr2_prefix=C:\\radare2

      - name: Build with Meson
        shell: bash
        run: |
          meson compile -C builddir -v

      - name: Smoke test executable
        shell: bash
        run: |
          EXE_PATH=builddir/r2mcp.exe
          if [ ! -f "$EXE_PATH" ]; then EXE_PATH=builddir/src/r2mcp.exe; fi
          if [ -f "$EXE_PATH" ]; then echo "Found $EXE_PATH"; "$EXE_PATH" -h || true; else echo "r2mcp.exe not found"; exit 0; fi

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p release
          if [ -f builddir/r2mcp.exe ]; then cp builddir/r2mcp.exe release/; fi
          if [ -f builddir/src/r2mcp.exe ]; then cp builddir/src/r2mcp.exe release/; fi
          if [ -z "$(ls -A release || true)" ]; then echo "No artifacts to package"; fi
          powershell.exe -Command "Compress-Archive -Path release/* -DestinationPath r2mcp-windows-msys2.zip -Force"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: r2mcp-windows-msys2
          path: r2mcp-windows-msys2.zip

      - name: Create GitHub Release (on tag)
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: r2mcp-windows-msys2.zip
          asset_name: r2mcp-windows-msys2.zip
          asset_content_type: application/zip
